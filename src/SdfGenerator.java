
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author karma
 */
public class SdfGenerator extends javax.swing.JFrame implements PropertyChangeListener {

	/**
	 * Creates new form Gui
	 */
	
	DistanceField2D df;
	BufferedImage img; //output texture
	
	public SdfGenerator(String[] args) {
		
		df = new DistanceField2D();
		initComponents();
		
		//set input image to argument 0
		if (args.length > 0) {
			
			try {
				df.setInputImage(args[0]);
				jImagePanel1.setImage(df.getInputImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
				
			} catch (IOException ex) {
				
				String s = "error opening" + args[0];
				JOptionPane.showMessageDialog(rootPane, s);
			}
		}

		//set label
		if (df.input != null) {
			
			jLabel3.setText(String.format("%d x %d", df.input.getWidth(), df.input.getHeight()));
			
		} else {
			
			jLabel3.setText("");
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                jFileChooser1 = new javax.swing.JFileChooser();
                jFileChooser2 = new javax.swing.JFileChooser();
                jPanel2 = new javax.swing.JPanel();
                jPanel1 = new javax.swing.JPanel();
                jImagePanel1 = new JImagePanel();
                jLabel1 = new javax.swing.JLabel();
                jButton2 = new javax.swing.JButton();
                jLabel3 = new javax.swing.JLabel();
                jPanel3 = new javax.swing.JPanel();
                jProgressBar1 = new javax.swing.JProgressBar();
                jButton1 = new javax.swing.JButton();
                jSpinner1 = new javax.swing.JSpinner();
                jLabel2 = new javax.swing.JLabel();
                jLabel4 = new javax.swing.JLabel();
                jComboBox1 = new javax.swing.JComboBox<>();
                jPanel4 = new javax.swing.JPanel();
                jButton3 = new javax.swing.JButton();
                jPanel5 = new javax.swing.JPanel();
                jImagePanel3 = new JImagePanel();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("SDF Texture Generator");

                jPanel2.setLayout(new java.awt.GridBagLayout());

                jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Input Image", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
                jPanel1.setLayout(new java.awt.GridBagLayout());

                jImagePanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                jImagePanel1.setImage(null);
                jImagePanel1.setMinimumSize(new java.awt.Dimension(100, 100));
                jImagePanel1.setName(""); // NOI18N
                jImagePanel1.setPreferredSize(new java.awt.Dimension(101, 101));

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jImagePanel1, gridBagConstraints);

                jLabel1.setText("Load Image:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLabel1, gridBagConstraints);

                jButton2.setText("Open");
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton2ActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jButton2, gridBagConstraints);

                jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel3.setText("jLabel3");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLabel3, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel2.add(jPanel1, gridBagConstraints);

                jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Generate Texture", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
                jPanel3.setLayout(new java.awt.GridBagLayout());

                jProgressBar1.setStringPainted(true);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel3.add(jProgressBar1, gridBagConstraints);

                jButton1.setText("Generate");
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel3.add(jButton1, gridBagConstraints);

                jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 25, 1));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel3.add(jSpinner1, gridBagConstraints);

                jLabel2.setText("Spread:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel3.add(jLabel2, gridBagConstraints);

                jLabel4.setText("Size:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel3.add(jLabel4, gridBagConstraints);

                jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "64 x 64", "128  x 128", "256 x 256", "512 x 512" }));
                jComboBox1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jComboBox1ActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel3.add(jComboBox1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel2.add(jPanel3, gridBagConstraints);

                jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Output Texture", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
                jPanel4.setLayout(new java.awt.GridBagLayout());

                jButton3.setText("Save Texture");
                jButton3.setEnabled(false);
                jButton3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton3ActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel4.add(jButton3, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel2.add(jPanel4, gridBagConstraints);

                getContentPane().add(jPanel2, java.awt.BorderLayout.WEST);

                jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
                jPanel5.setLayout(new java.awt.BorderLayout());

                jImagePanel3.setPreferredSize(new java.awt.Dimension(256, 256));
                jPanel5.add(jImagePanel3, java.awt.BorderLayout.CENTER);

                getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                
		jButton3.setEnabled(false);
		Task task = new Task(df);
		task.addPropertyChangeListener(this);
		task.execute();
		
        }//GEN-LAST:event_jButton1ActionPerformed

        private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                
		int i = jFileChooser1.showOpenDialog(jPanel1);
		
		if (i == JFileChooser.APPROVE_OPTION) {
			
			File f = jFileChooser1.getSelectedFile();
			String path = f.getAbsolutePath();
			
			try {
				df.setInputImage(path);
				jImagePanel1.setImage(df.input.getScaledInstance(100, 100, Image.SCALE_DEFAULT));
				jImagePanel1.paintComponent(jImagePanel1.getGraphics());
				
			} catch(IOException ex) {
				
				JOptionPane.showMessageDialog(rootPane, "could not save image to:\n "+ path);
			}
		}
        }//GEN-LAST:event_jButton2ActionPerformed

        private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_jComboBox1ActionPerformed

        private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
                
		int i = jFileChooser1.showSaveDialog(jPanel1);
		
		if (i == JFileChooser.APPROVE_OPTION) {
			
			File f = jFileChooser1.getSelectedFile();
			
			try {
				ImageIO.write(img, "png", f);
				
			} catch (IOException ex) {
				
				JOptionPane.showMessageDialog(rootPane, "Could not save image");			
			}
		}
        }//GEN-LAST:event_jButton3ActionPerformed
	
	@Override
	public void propertyChange(PropertyChangeEvent evt) {
			 
		if ("progress".equals(evt.getPropertyName())) {
		
			int n = (Integer) evt.getNewValue();
			jProgressBar1.setValue(n);
			jProgressBar1.setString(Integer.toString(n) + "%");
		}
	}
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(SdfGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(SdfGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(SdfGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(SdfGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>
		
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			
			@Override
			public void run() {

				SdfGenerator window = new SdfGenerator(args);
				window.pack();
				window.setVisible(true);
			}
		});	
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton jButton1;
        private javax.swing.JButton jButton2;
        private javax.swing.JButton jButton3;
        private javax.swing.JComboBox<String> jComboBox1;
        private javax.swing.JFileChooser jFileChooser1;
        private javax.swing.JFileChooser jFileChooser2;
        private JImagePanel jImagePanel1;
        private JImagePanel jImagePanel3;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JPanel jPanel3;
        private javax.swing.JPanel jPanel4;
        private javax.swing.JPanel jPanel5;
        private javax.swing.JProgressBar jProgressBar1;
        private javax.swing.JSpinner jSpinner1;
        // End of variables declaration//GEN-END:variables

	
	class Task extends SwingWorker<Boolean, Integer> {

		DistanceField2D df;
		
		
		public Task(DistanceField2D d) {
			
			df = d;
		}
			
		@Override
		public Boolean doInBackground() {

//			//calculate distance field
			int cx = df.input.getWidth() / 2;
			int cy = df.input.getHeight() / 2;
			int spread = (int) jSpinner1.getValue();

			float maxDist = (float) Math.sqrt((spread * spread) * 2);

			int numPixels = df.input.getWidth() * df.input.getHeight();
			int count = 1;

			for (int y = 0; y < df.input.getHeight(); y++) {

				for (int x = 0; x < df.input.getWidth(); x++) {

					boolean col = df.checkPixel(x, y);

					//white
					if (col) {

						float d = df.checkBox(x, y, spread, false);
						df.distanceField[x][y] = df.normalise(d, maxDist);

					//black
					} else {

						float d = -df.checkBox(x, y, spread, true);
						df.distanceField[x][y] = df.normalise(d, maxDist);
					}
					
					float val = (float) count / numPixels;
					count++;
					setProgress((int)(val * 100));
				}

			}	
			
			return true;
		}

		 @Override
		 protected void done() {
			
			 try {
				
				System.out.println(this.get());
				
				switch ((String) jComboBox1.getSelectedItem()) {
					
					case "64 x 64":
			
						img = df.generateOuputImage(64, 64);
						break;
						
					case "128 x 128":
						
						img = df.generateOuputImage(128, 128);
						break;
						
					case "256 x 256":
						
						img = df.generateOuputImage(256, 256);
						break;
						
					default:
						
						img = df.generateOuputImage(512, 512);
						break;
				}
				
				jImagePanel3.setImage(img.getScaledInstance(512, 512, Image.SCALE_DEFAULT));
				jImagePanel3.paintComponent(jImagePanel3.getGraphics());
				
				jButton3.setEnabled(true);
				
			 } catch(Exception ex) {
				 
			 }
		}		 
	}

}
